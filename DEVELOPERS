Apache CouchDB DEVELOPERS
=========================

Before you start here, read `INSTALL.Unix` (or `INSTALL.Windows`) and
follow the setup instructions including the installation of all the
listed dependencies for your system.

Only follow these instructions if you are building from a source checkout.

If you're unsure what this means, ignore this document.

Dependencies
------------

You will need the following installed:

 * GNU Libtool            (http://www.gnu.org/software/libtool/)
 * GNU Automake (>=1.6.3) (http://www.gnu.org/software/automake/)
 * GNU Autoconf (>=2.63)  (http://www.gnu.org/software/autoconf/)
 * GNU Autoconf Archive   (http://www.gnu.org/software/autoconf-archive/)
 * pkg-config             (http://www.freedesktop.org/wiki/Software/pkg-config)

You may also need:

 * Sphinx                 (http://sphinx.pocoo.org/)
 * LaTex                  (http://www.latex-project.org/)
 * GNU Texinfo            (http://www.gnu.org/software/texinfo/)
 * GNU help2man           (http://www.gnu.org/software/help2man/)
 * GnuPG                  (http://www.gnupg.org/)
 * md5sum                 (http://www.microbrew.org/tools/md5sha1sum/)
 * sha1sum                (http://www.microbrew.org/tools/md5sha1sum/)

The first of these optional dependencies are required for building the
documentation. The last three are needed to build releases.

You will need these optional dependencies installed if:

 * You are working on the documentation, or
 * You are preparing a distribution archive

However, you do not need them if:

 * You are building from a distribution archive, or
 * You don't care about building the documentation


Here is a list of *optional* dependencies for various operating systems.
Installation will be easiest, when you install them all.

Debian-based (inc. Ubuntu) Systems
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    sudo apt-get install help2man
    sudo apt-get install python-sphinx
    sudo apt-get install texlive-latex-base
    sudo apt-get install texlive-latex-recommended
    sudo apt-get install texlive-latex-extra
    sudo apt-get install texlive-fonts-recommended
    sudo apt-get install texinfo
    sudo apt-get install gnupg

Gentoo-based Systems
~~~~~~~~~~~~~~~~~~~~

    sudo emerge texinfo
    sudo emerge gnupg
    sudo emerge coreutils
    sudo emerge pkgconfig
    sudo emerge help2man
    sudo USE=latex emerge sphinx

RedHat-based (Fedora, Centos, RHEL) Systems
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    sudo yum install help2man
    sudo yum install python-sphinx
    sudo yum install python-docutils
    sudo yum install python-pygments
    sudo yum install texlive-latex
    sudo yum install texlive-latex-fonts
    sudo yum install texinfo
    sudo yum install gnupg

Mac OS X
~~~~~~~~

Install Homebrew, if you do not have it already:

    https://github.com/mxcl/homebrew

Unless you want to install the optional dependencies, skip to the next section.

Install what else we can with Homebrew:

    brew install help2man
    brew install gnupg
    brew install md5sha1sum

If you don't already have pip installed, install it:

    sudo easy_install pip

Now, install the required Python packages:

    sudo pip install sphinx
    sudo pip install docutils
    sudo pip install pygments

Download MaxTeX from here:

    http://www.tug.org/mactex/

Follow the instructions to get a working LaTeX install on your system.

Add a line like this to your `.bash_profile` file:

    PATH=/usr/local/texlive/2013/bin/x86_64-darwin:$PATH

Modify this to match your texlive instalation.

Windows
~~~~~~~

Follow the instructions in INSTALL.Windows and build all components from
source, using the same Visual C++ compiler and runtime.

Fauxton
-------

Temporary documentation, to be integrated properly later.

This is the initial implementation of Fauxton, focused on fleshing out
the various pieces of functionality and as a test bed for new ideas.
Full functionality and design considerations will be added later.

Current items of interest:

  * Live JSON editor with dynamic JS Hinting and error popups
  * Initial plugin system
  * Minimal externally loadable plugin example
  * Data popups for additional db info on \_all_dbs page
  * CouchDB API compliant urls

A recent of [node.js](http://nodejs.org/) and npm is required.

Fauxton Setup
~~~~~~~~~~~~~

cd src/fauxton

Install all dependencies
npm install

# this needs to be run locally before the build, or you need this stuff
globally

(Optional) To avoid a npm global install
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Add node_modules/.bin to your path
export PATH=./node_modules/.bin:$PATH
Or just use the wrappers in ./bin/

Development mode, non minified files
./bin/grunt couchdebug

Or fully compiled install
/bin/grunt couchdb

Dev Server
~~~~~~~~~~

Using the dev server is the easiest way to use fauxton, specially when
developing for it.

bin/grunt dev

You can then access Fauxton via http://localhost:8000/

Prepare Fauxton Release
~~~~~~~~~~~~~~~~~~~~~~~

Follow the "Fauxton Setup" section then:

./bin/grunt couchdb

This will install the latest version of Fauxton into `/share/www/fauxton/build`

Running Tests
~~~~~~~~~~~~~

There are two ways to run the tests. `grunt test` will run the tests via the
commandline. It is also possible to view them via the url
`http://localhost:8000/testrunner` when the dev server is running. Refreshing
the url will rerun the tests via phantomjs and in the browser.

To Deploy Fauxton
~~~~~~~~~~~~~~~~~

./bin/grunt couchapp_deploy - to deploy to your local [Couchdb instance]
(http://localhost:5984/fauxton/_design/fauxton/index.html)

Understang Fauxton Code layout
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Each bit of functionality is its own seperate module or addon. All core
modules are stored under `app/module` and any addons that are optional are
under `app/addons`.

We use [backbone.js](http://backbonejs.org/) and
[Backbone.layoutmanager](https://github.com/tbranyen/backbone.layoutmanager)
quite heavily, so best to get an idea how they work.

Its best at this point to read through a couple of the modules and addons to
get an idea of how they work. Two good starting points are `app/addon/config`
and `app/modules/databases`.

Each module must have a `base.js` file, this is read and compile when Fauxton
is deployed. A `resource.js` file is usually for your Backbone.Models and
Backbone.Collections, `view.js` for your Backbone.Views. The `routes.js` is
used to register a url path for your view along with what layout, data,
breadcrumbs and api point is required for the view.

Todo items
~~~~~~~~~~

Checkout
[Jira](https://issues.apache.org/jira/browse/COUCHDB/component/12320406) for a
list of items to do.

Bootstrapping
-------------

Bootstrap the pristine source by running:

    ./bootstrap

You must repeat this step every time you update your source checkout.

Configuring
-----------

Configure the source by running:

    ./configure

Note that this will not fail when the optional dependencies are missing.

To ensure the optional dependencies are installed, run:

    ./configure --enable-strictness

If you don't care about docs and want to skip the whole thing, run:

    ./configure --disable-docs

If you're working on the build system itself, you can run:

    ./configure --disable-tests

This skips the tests allowing quicker `make' cycles.

If you want to disable something for `make distcheck` you must pass down
the `./configure` options through the environment.

Run something like this:

@@ this doens't work!

    export DISTCHECK_CONFIGURE_FLAGS=--disable-tests

If you want to build it into different destination than `/usr/local`.

    ./configure --prefix=/<your directory path>

Testing
-------

Check the test suite by running:

    make check

Generate a coverage report by running:

    make cover

Please report any problems to the developer's mailing list.

Releasing
---------

The release procedure is documented here:

    https://wiki.apache.org/couchdb/Release_Procedure

Unix-like Systems
~~~~~~~~~~~~~~~~~

Prepare the release artefacts by running:

    make distcheck

You can prepare signed release artefacts by running:

    make distsign

The release artefacts can be found in the root source directory.

Microsoft Windows
~~~~~~~~~~~~~~~~~

Prepare the release artefacts by running:

    make dist

The release artefacts can be found in the `etc/windows` directory.

Until the build system has been improved, you must make sure that you run this
command from a clean source checkout. If you do not, your test database and log
files will be bundled up in the release artefact.
